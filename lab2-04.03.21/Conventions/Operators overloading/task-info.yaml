type: edu
custom_name: Operators overloading
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 274
    length: 333
    placeholder_text: 'operator fun MyDate.plus(timeInterval: TimeInterval): MyDate
      = TODO()'
    initial_state:
      length: 69
      offset: 192
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      operator fun MyDate.plus(timeInterval: TimeInterval) =
              addTimeIntervals(timeInterval, 1)

      class RepeatedTimeInterval(val timeInterval: TimeInterval, val number: Int)

      operator fun TimeInterval.times(number: Int) =
              RepeatedTimeInterval(this, number)

      operator fun MyDate.plus(timeIntervals: RepeatedTimeInterval) =
              addTimeIntervals(timeIntervals.timeInterval, timeIntervals.number)
  - offset: 672
    length: 39
    placeholder_text: TODO("Uncomment") //return today + YEAR * 2 + WEEK * 3 + DAY
      * 5
    initial_state:
      length: 64
      offset: 371
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: return today + YEAR * 2 + WEEK * 3 + DAY * 5
  text: |
    import TimeInterval.*

    data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)

    // Supported intervals that might be added to dates:
    enum class TimeInterval { DAY, WEEK, YEAR }

    operator fun MyDate.plus(timeInterval: TimeInterval): MyDate = TODO()

    fun task1(today: MyDate): MyDate {
        return today + YEAR + WEEK
    }

    fun task2(today: MyDate): MyDate {
        TODO("Uncomment") //return today + YEAR * 2 + WEEK * 3 + DAY * 5
    }
  learner_created: false
- name: src/DateUtil.kt
  visible: true
  text: |-
    import java.util.Calendar

    /*
     * Returns the date after the given time interval.
     * The interval is specified as the given amount of days, weeks of years.
     * Usages:
     * 'date.addTimeIntervals(TimeInterval.DAY, 4)'
     * 'date.addTimeIntervals(TimeInterval.WEEK, 3)'
     */
    fun MyDate.addTimeIntervals(timeInterval: TimeInterval, amount: Int): MyDate {
        val c = Calendar.getInstance()
        c.set(year + if (timeInterval == TimeInterval.YEAR) amount else 0, month, dayOfMonth)
        var timeInMillis = c.timeInMillis
        val millisecondsInADay = 24 * 60 * 60 * 1000L
        timeInMillis += amount * when (timeInterval) {
            TimeInterval.DAY -> millisecondsInADay
            TimeInterval.WEEK -> 7 * millisecondsInADay
            TimeInterval.YEAR -> 0L
        }
        val result = Calendar.getInstance()
        result.timeInMillis = timeInMillis
        return MyDate(result.get(Calendar.YEAR), result.get(Calendar.MONTH), result.get(Calendar.DATE))
    }
  learner_created: false
- name: test/tests.kt
  visible: false
  text: |
    import koans.util.errorMessage
    import org.junit.Assert
    import org.junit.Test

    class TestOperatorsOverloading {
        @Test(timeout = 1000)
        fun testAddOneTimeInterval() {
            Assert.assertEquals(errorMessage("task1"), MyDate(2015, 5, 8), task1(MyDate(2014, 5, 1)))
        }

        @Test(timeout = 1000)
        fun testOneMonth() {
            Assert.assertEquals(errorMessage("task2"), MyDate(2016, 0, 27), task2(MyDate(2014, 0, 1)))
        }

        @Test(timeout = 1000)
        fun testMonthChange() {
            Assert.assertEquals(errorMessage("task2"), MyDate(2016, 1, 20), task2(MyDate(2014, 0, 25)))
        }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 04 Mar 2021 22:16:28 UTC
record: -1
