type: edu
custom_name: Sequences
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 193
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 193
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      return customer
                  .orders
                  .asSequence()
                  .filter(Order::isDelivered)
                  .flatMap { it.products.asSequence() }
                  .maxBy(Product::price)
  - offset: 393
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 393
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      return customers
                  .asSequence()
                  .flatMap(Customer::getOrderedProducts)
                  .count { it == product }
  - offset: 466
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 466
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: orders.flatMap(Order::products).asSequence()
  text: |
    // Find the most expensive product among all the delivered products
    // ordered by the customer. Use `Order.isDelivered` flag.
    fun findMostExpensiveProductBy(customer: Customer): Product? {
        TODO()
    }

    // Count the amount of times a product was ordered.
    // Note that a customer may order the same product several times.
    fun Shop.getNumberOfTimesProductWasOrdered(product: Product): Int {
        TODO()
    }

    fun Customer.getOrderedProducts(): Sequence<Product> =
            TODO()
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    import koans.util.errorMessage
    import org.junit.Assert
    import org.junit.Test

    class K_Compound_Tasks {

        @Test(timeout = 1000)
        fun testMostExpensiveDeliveredProduct() {
            val testShop = shop("test shop for 'most expensive delivered product'",
                    customer(lucas, Canberra,
                            order(idea, isDelivered = false),
                            order(reSharper)
                    )
            )
            Assert.assertTrue(errorMessage("findMostExpensiveProductBy"), reSharper == findMostExpensiveProductBy(testShop.customers[0]))
        }

        @Test(timeout = 1000)
        fun testNumberOfTimesEachProductWasOrdered() {
            Assert.assertTrue(errorMessage("getNumberOfTimesProductWasOrdered"), 3 == shop.getNumberOfTimesProductWasOrdered(reSharper))
        }
    }
  learner_created: false
- name: test/TestShop.kt
  visible: false
  text: |
    //products
    val idea = Product("IntelliJ IDEA Ultimate", 199.0)
    val reSharper = Product("ReSharper", 149.0)
    val dotTrace = Product("DotTrace", 159.0)
    val dotMemory = Product("DotTrace", 129.0)
    val dotCover = Product("DotCover", 99.0)
    val appCode = Product("AppCode", 99.0)
    val phpStorm = Product("PhpStorm", 99.0)
    val pyCharm = Product("PyCharm", 99.0)
    val rubyMine = Product("RubyMine", 99.0)
    val webStorm = Product("WebStorm", 49.0)
    val teamCity = Product("TeamCity", 299.0)
    val youTrack = Product("YouTrack", 500.0)

    //customers
    val lucas = "Lucas"
    val cooper = "Cooper"
    val nathan = "Nathan"
    val reka = "Reka"
    val bajram = "Bajram"
    val asuka = "Asuka"

    //cities
    val Canberra = City("Canberra")
    val Vancouver = City("Vancouver")
    val Budapest = City("Budapest")
    val Ankara = City("Ankara")
    val Tokyo = City("Tokyo")

    fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())
    fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)
    fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())

    val shop = shop("jb test shop",
            customer(lucas, Canberra,
                    order(reSharper),
                    order(reSharper, dotMemory, dotTrace)
            ),
            customer(cooper, Canberra),
            customer(nathan, Vancouver,
                    order(rubyMine, webStorm)
            ),
            customer(reka, Budapest,
                    order(idea, isDelivered = false),
                    order(idea, isDelivered = false),
                    order(idea)
            ),
            customer(bajram, Ankara,
                    order(reSharper)
            ),
            customer(asuka, Tokyo,
                    order(idea)
            )
    )

    val customers: Map<String, Customer> = shop.customers.associateBy { it.name }

    val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)

    val groupedByCities = mapOf(
            Canberra to listOf(lucas, cooper),
            Vancouver to listOf(nathan),
            Budapest to listOf(reka),
            Ankara to listOf(bajram),
            Tokyo to listOf(asuka)
    ).mapValues { it.value.map { name -> customers[name] } }
  learner_created: false
- name: src/Shop.kt
  visible: true
  text: |-
    data class Shop(val name: String, val customers: List<Customer>)

    data class Customer(val name: String, val city: City, val orders: List<Order>) {
        override fun toString() = "$name from ${city.name}"
    }

    data class Order(val products: List<Product>, val isDelivered: Boolean)

    data class Product(val name: String, val price: Double) {
        override fun toString() = "'$name' for $price"
    }

    data class City(val name: String) {
        override fun toString() = name
    }
  learner_created: false
status: Unchecked
record: -1
